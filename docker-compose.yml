version: "3.8"

services:
  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"  # порт для подключения снаружи (например, с локальной машины)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:9092,EXTERNAL://broker:29092
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper
    networks:
      - kafka-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-net

  api-gateway:
    build:
      context: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - broker
    environment:
      - KAFKA_BROKER=broker:9092
      - KAFKA_RESPONSE_TOPIC=model_response
      - KAFKA_HISTORY_REQUEST_TOPIC=result_request
      - KAFKA_HISTORY_RESPONSE_TOPIC=result_response
    networks:
      - kafka-net

  auth-service:
    build:
      context: ./auth-service
    container_name: auth-service
    ports:
      - "8081:8081"
    depends_on:
      - user-db
      - redis
      - broker
    environment:
      - PORT=8081
      - POSTGRES_DSN=postgresql://postgres:postgres@user-db:5432/users_info?sslmode=disable
      - REDIS_ADDR=redis:6379
      - KAFKA_BROKER=broker:9092
      - KAFKA_TOPIC=user_requests
      - KAFKA_RESPONSE_TOPIC=user_responses
      - KAFKA_FORWARD_TOPIC=text_requests #если запрос валиден
    networks:
      - kafka-net

  user-db:
    image: postgres:14
    container_name: user-db
    restart: always
    environment:
      POSTGRES_DB: users_info
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./user-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - kafka-net

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - kafka-net

  model-service:
    build:
      context: ./model-service
    container_name: model-service
    depends_on:
      - broker
    environment:
      - KAFKA_BROKER=broker:9092
      - KAFKA_REQUEST_TOPIC=model_requests
      - KAFKA_RESPONSE_TOPIC=model_response
    networks:
      - kafka-net

  text-service:
    build:
      context: ./text-service
    container_name: text-service
    depends_on:
      - broker
      - redis
    environment:
      - KAFKA_BROKER=broker:9092
      - KAFKA_USER_TOPIC=user_responses
      - KAFKA_PRODUCER_TOPIC=text_requests
      - KAFKA_MODEL_REQUEST_TOPIC=model_requests
      - KAFKA_MODEL_RESPONSE_TOPIC=model_response
      #- KAFKA_MODEL_SIMPLIFIED_RESPONSE_TOPIC=simplified_response
      - REDIS_ADDR=redis:6379
    networks:
      - kafka-net

  result-writer:
    build:
      context: ./result-writer
    container_name: result-writer
    depends_on:
      - broker
      - redis
      - user-db
    environment:
      - KAFKA_BROKER=broker:9092
      - KAFKA_TOPIC=model_response
      - KAFKA_REQUEST_TOPIC=result_request
      - KAFKA_RESPONSE_TOPIC=result_response
      - REDIS_ADDR=redis:6379
      - POSTGRES_DSN=postgresql://postgres:postgres@user-db:5432/users_info?sslmode=disable
    networks:
      - kafka-net


  frontend:
    build:
      context: ./frontend  # путь к Vite + React
    container_name: frontend
    ports:
      - "3000:80"  # локальный порт:порт в контейнере
    restart: always
    networks:
      - kafka-net


  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - './nginx.conf:/etc/nginx/nginx.conf'
    depends_on:
      - api-gateway
      - auth-service
      - text-service
      - model-service
      - result-writer
      - frontend
    networks:
      - kafka-net


networks:
  kafka-net:
    driver: bridge

volumes:
  pgdata: